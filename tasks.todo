Version 1.0:
WIP App#readline: support unicode.

edit last, last - 1 ...

Allow to edit items:
Consider adding context-aware editing:
  /masl Search for "masl" and move the cursor there. ALSO j/k/up/down.
  Then we can be more vim-y, like dd -> anuluj hodnotu or delete item.
  e => edit THAT item.
       Allow esc to quit.
#   Maybe split into 3 windows (expense data, middle, status line)?
#     That conflicts with App.new.run do |app, window|
# e (edit), d (delete), c (cycle between values).

Expense:
- Where rates and fee should be added? Deposit, Income ...

Finish WithdrawalCommand.

BalanceCommand:
- Add setting balances that creates UnknownExpense behind the scene.
- Support multi-currency reports (for one day).

ReviewCommand:
- Add fees for withdrawals and income items (fee + divergence from the official exchange rate).
- Finish.

# indulgence: #eating_out, #crawings, #tea, #drinks
# essential: #groceries (although ...), #mhd
# travelling: #fuel, #vignette
# maintenance: #car
# ?: #social

# OR ...
# Press #, then display all of them with their indices and use:
# 1. Pressing # again to cycle through.
# 1. tab to complete
# 2. and index to get the tag
# 3. write a new value
- Support custom_data or ExpenseWithUnitPrice and the like.
- Finish the tag editor.
- Quit input of e/t/n commands.
- Find <bright_black>.

My expenses:
- Tags: add #recurrent, reduce their number and add #indulgence, #long_term, #gift, maybe #travelling.

# TODO: Mapping of accounts to payment methods:
# FIO EUR -> FIO EUR VISA or something like that.
#
# We could even just use the bank account, but PayPal
# breaks the 1:1 mapping.
#
# Also sometimes the expense actually is a bank transfer rather than a bank
# transaction, though it's similar enough (and rare enough) that keeping it
# together would make the payment_methods easier to work with.
#
# Maybe I can separate it into bank_account x payment method and have there
# same contract as between location x currency.

Release:
- Update the README.
- Tag with 1.0 & push the gem.
________________________________________________________________________________

Budgets:
- Weekly day-to-day budget. Weekly, rather than daily, to account for shopping cycles.
  - Should it be one or should it differ per location?
- Pleasures: from alcohol to flights to Colombia.
- Values of long-term value: bike, razor etc.
- Support in LastCommand.

Later:
- Add other LoggableItems into the add command and switch between them by 't' (type).
  - That would need moving asking for desc & total into the main program and
    also unloading the commands and replacing them.

Come up with a savings scheme.

- Finish the review command based on metadata.last_review.{note,date}.
- bin/expense on its own should enter the command mode, where 'a/+' (or e/i/w) is add,
  b is balance, l is last etc.

- Add quaterly and yearly reports.
